
#region Общие замечания.

// 1. При проверке предусловий в конструкторах фигур вместо генерации исключений можно использовать конструирование "стандартных" фигур (например, с нулевыми площадями).
// Выбор стратегии определяется в первую очередь требованиями к приложению.

// 2. Значение площади объекта можно вычислять непосредственно в конструкторе. При таком подходе можно избежать выполнения расчетов при каждом вызове методе "GetArea()".

// 3. Класс "FigureAreaSolver<T>" (из файла "GeometryFigures.cs") спроектирован обобщенным с целью обеспечения полиморфизма времени компиляции метода расчета площади.

// 4. В целях инкапсуляции методу "GetArea()" интерфейса "IFigure" в классах фигур можно назначить модификатор доступа "internal". Таким образом, клиенты, которую будут
// использовать данную библиотеку, смогут получать площадь объекта-"фигуры" только через "public"-метод объекта класса "FigureAreaSolver" (что позволит избавиться в т.ч.
// от "бродячего" значения количества значащих цифр для округления площади фигуры).

#endregion

#region Пример SQL-запроса для вопроса 2 из задания.

//  По условию понятно, что продукты и категории как сущности БД связаны отношением "многие ко многимк". Т.о., в БД существует 3 таблицы: "Продукты", "Категории" и
//  "Продукты_и_Категории" (промежуточная таблица, свящывающая продукты и категории). Запрос выглядит следующим образом:
//      SELECT Продукты.Имя, Категории.Имя
//      FROM Продукты
//      JOIN Продукты_и_Категории ON Продукты.Имя = Продукты_и_Категории.ИмяПродукта
//      JOIN Категории ON Продукты_и_Категории.ИмяКатегории = Категории.Имя

#endregion


namespace MindBoxTask 
{
    class Program
    {
        public static void Main()
        {
            /// Пример работы библиотеки.
            
            Circle firstCircle  = new(5);
            Circle secondCircle = new(2);

            Triangle firstTriangle  = new(3, 4, 5);
            Triangle secondTriangle = new(3, 3, 3);

            FigureAreaSolver<Circle>   circleAreaSolver   = new();
            FigureAreaSolver<Triangle> triangleAreaSolver = new();

            Console.WriteLine($"Площадь первого круга: {circleAreaSolver.GetFiguredArea(firstCircle,  2)}");
            Console.WriteLine($"Площадь второго круга: {circleAreaSolver.GetFiguredArea(secondCircle, 1)}");

            Console.WriteLine($"Площадь первого треугольника: {triangleAreaSolver.GetFiguredArea(firstTriangle)}");
            Console.WriteLine($"Площадь второго треугольника: {triangleAreaSolver.GetFiguredArea(secondTriangle, 1)}");

            Console.ReadKey();
        }

    }

}